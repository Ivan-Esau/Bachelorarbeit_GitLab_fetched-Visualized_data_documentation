[
  {
    "id": 717,
    "iid": 1,
    "project_id": 202,
    "title": "[US-01] Place fleet on a concealed board",
    "description": "## Description\nImplements ship placement functionality for Battleship game according to Issue #1 requirements.\n\n## Changes\n- Created complete Java application with GUI interface\n- Implemented ship placement validation and game state management\n- Added comprehensive test suite with 51 tests\n- All acceptance criteria validated and passing\n\n## Requirements Implemented\n✅ Provide a 10×10 grid per player\n✅ Provide a standard fleet with ship lengths: Carrier (5), Battleship (4), Destroyer (3), Submarine (3), Patrol Boat (2)\n✅ Allow placement horizontally or vertically; reject diagonal, overlapping, or out-of-bounds placements\n✅ Keep each player's ship locations hidden from the opponent\n\n## Acceptance Criteria Validated\n✅ Given a ship partly outside the grid, when placement is attempted, then the system rejects it with an error and no placement occurs\n✅ Given two ships sharing any square, when the second is placed, then placement is rejected and existing ships remain unchanged\n✅ Given a valid layout, when all ships are placed, then the board is marked ready and remains hidden from the opponent\n\n## Technical Details\n- **Pipeline**: #8010 ✅ SUCCESS\n- **Tests**: 51/51 passing (100% success rate)\n- **Architecture**: Layered (model, controller, service, util, view)\n- **Tech Stack**: Java 21, Maven, JUnit 5\n\nCloses #1",
    "state": "opened",
    "created_at": "2025-10-16T09:06:47.373Z",
    "updated_at": "2025-10-16T09:31:13.003Z",
    "merged_by": null,
    "merge_user": null,
    "merged_at": null,
    "closed_by": null,
    "closed_at": null,
    "target_branch": "master",
    "source_branch": "feature/issue-1-us-01-place-fleet-on-a-conceal",
    "user_notes_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "author": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "assignees": [],
    "assignee": null,
    "reviewers": [],
    "source_project_id": 202,
    "target_project_id": 202,
    "labels": [],
    "draft": false,
    "imported": false,
    "imported_from": "none",
    "work_in_progress": false,
    "milestone": null,
    "merge_when_pipeline_succeeds": false,
    "merge_status": "unchecked",
    "detailed_merge_status": "unchecked",
    "merge_after": null,
    "sha": "7978059ab965ca5798183de93ec0b946621e69ad",
    "merge_commit_sha": null,
    "squash_commit_sha": null,
    "discussion_locked": null,
    "should_remove_source_branch": null,
    "force_remove_source_branch": null,
    "prepared_at": "2025-10-16T09:06:49.567Z",
    "reference": "!1",
    "references": {
      "short": "!1",
      "relative": "!1",
      "full": "simulationsprojects_bachelorarbeit_ivan_esau/ba_project_a02_battleship!1"
    },
    "web_url": "https://gitlab.nibbler.fh-swf.de/simulationsprojects_bachelorarbeit_ivan_esau/ba_project_a02_battleship/-/merge_requests/1",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "squash": false,
    "squash_on_merge": false,
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "has_conflicts": false,
    "blocking_discussions_resolved": true
  },
  {
    "id": 718,
    "iid": 2,
    "project_id": 202,
    "title": "[US-02] Take turns firing with hit/miss feedback",
    "description": "## Implementation Summary\n\nThis merge request implements the turn-based firing system for the Battleship game as specified in Issue #2.\n\n### Requirements Implemented\n\n✅ **1) Enforce alternating turns**\n- Game state management with `GameState.PLAYER1_TURN` and `GameState.PLAYER2_TURN`\n- Automatic turn switching on misses\n- Turn preservation on hits (player gets another turn)\n\n✅ **2) Let the active player select a target coordinate on the opponent's grid**\n- `Game.executeShot()` method handles shot execution\n- Coordinate validation and boundary checking\n- Integration with player tracking boards\n\n✅ **3) Report 'hit' or 'miss' immediately and record the result on both players' tracking views**\n- `Player.ShotResult` enum with HIT, MISS, SUNK, ALREADY_TARGETED, INVALID\n- Automatic tracking board updates for both players\n- Immediate feedback through return values\n\n✅ **4) Prevent firing at the same coordinate twice**\n- `Board.isCellTargeted()` method checks if cell was already hit\n- `ShotResult.ALREADY_TARGETED` returned for duplicate shots\n- Turn state preserved when duplicate shot attempted\n\n### Acceptance Criteria Validated\n\n✅ **AC1:** Given A1 has not been targeted, when the player fires at A1, then the result is shown (hit/miss) and A1 becomes marked as used\n- Test: `testAcceptanceCriteria1_FirstShotAtUntargetedCoordinate_ShowsResultAndMarksUsed`\n\n✅ **AC2:** Given A1 is already targeted, when the player attempts A1 again, then the system blocks the action and preserves turn order rules\n- Test: `testAcceptanceCriteria2_AlreadyTargetedCoordinate_BlocksActionAndPreservesTurn`\n\n✅ **AC3:** Given a turn completes, when control passes, then only the next player can act\n- Test: `testAcceptanceCriteria3_TurnCompletes_OnlyNextPlayerCanAct`\n\n### Technical Implementation\n\n**Core Classes:**\n- `Game`: Manages game state and turn logic\n- `Player`: Handles player actions and tracking boards\n- `Board`: Manages grid state and shot processing\n- `Cell`: Represents individual grid cells\n\n**Key Features:**\n- Turn-based gameplay with proper state transitions\n- Shot validation and result reporting\n- Tracking board synchronization\n- Comprehensive test coverage for all acceptance criteria\n\n### Testing\n\nAll acceptance criteria are covered by integration tests in `AcceptanceCriteriaTest.java`:\n- Turn switching logic\n- Shot result handling\n- Duplicate shot prevention\n- Game state preservation\n\nCloses #2",
    "state": "opened",
    "created_at": "2025-10-16T09:48:38.660Z",
    "updated_at": "2025-10-16T10:30:37.507Z",
    "merged_by": null,
    "merge_user": null,
    "merged_at": null,
    "closed_by": null,
    "closed_at": null,
    "target_branch": "master",
    "source_branch": "feature/issue-2-us-02-take-turns-firing-with-h",
    "user_notes_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "author": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "assignees": [],
    "assignee": null,
    "reviewers": [],
    "source_project_id": 202,
    "target_project_id": 202,
    "labels": [],
    "draft": false,
    "imported": false,
    "imported_from": "none",
    "work_in_progress": false,
    "milestone": null,
    "merge_when_pipeline_succeeds": false,
    "merge_status": "unchecked",
    "detailed_merge_status": "unchecked",
    "merge_after": null,
    "sha": "70d398aeeced37a7d1c7cbfe25ba4760325f7319",
    "merge_commit_sha": null,
    "squash_commit_sha": null,
    "discussion_locked": null,
    "should_remove_source_branch": null,
    "force_remove_source_branch": null,
    "prepared_at": "2025-10-16T09:48:41.255Z",
    "reference": "!2",
    "references": {
      "short": "!2",
      "relative": "!2",
      "full": "simulationsprojects_bachelorarbeit_ivan_esau/ba_project_a02_battleship!2"
    },
    "web_url": "https://gitlab.nibbler.fh-swf.de/simulationsprojects_bachelorarbeit_ivan_esau/ba_project_a02_battleship/-/merge_requests/2",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "squash": false,
    "squash_on_merge": false,
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "has_conflicts": false,
    "blocking_discussions_resolved": true
  },
  {
    "id": 719,
    "iid": 3,
    "project_id": 202,
    "title": "[US-03] Track ship damage, announce sunk, and end the game",
    "description": "## Description\n\nImplements ship damage tracking, sunk ship announcements, and game ending functionality for the Battleship game.\n\n## Changes\n\n- Added damage tracking per ship with hit detection\n- Implemented ship sinking logic and announcements\n- Added game ending when all ships of a player are sunk\n- Implemented New Game functionality to reset boards\n- Added comprehensive test coverage for all acceptance criteria\n\n## Requirements Implemented\n\n✅ **1) Track hits per ship and determine when all squares of a ship are hit**\n- Ship hit tracking implemented in Player class\n- Sunk detection when all positions are hit\n\n✅ **2) Upon completion, announce the ship as 'sunk'**\n- Ship sinking announcements implemented\n- Visual indicators for sunk ships\n\n✅ **3) When all ships of a player are sunk, declare victory for the opponent and disable further input**\n- Game ending logic implemented\n- Victory declaration and input disabling\n\n✅ **4) Provide New Game to start a fresh match**\n- New Game functionality added\n- Complete board reset\n\n## Acceptance Criteria Verified\n\n✅ **Given the last undamaged square of a ship is hit, when the result is processed, then that ship is announced 'sunk'**\n- Test: `testShipSunkWhenAllPositionsHit`\n- Implementation: Player.shipSunk() method\n\n✅ **Given the final enemy ship is sunk, when the board updates, then the match ends, the winner is indicated, and no further shots are allowed**\n- Test: `testGameEndsWhenAllShipsSunk`\n- Implementation: Game.checkGameEnd() method\n\n✅ **Given a finished match, when New Game is chosen, then both boards reset to covered, unplaced state**\n- Test: `testNewGameResetsBoards`\n- Implementation: Game.reset() method\n\n## Technical Details\n\n- **Pipeline Status**: ✅ Success (Pipeline #8050)\n- **Test Coverage**: Comprehensive unit tests for all new functionality\n- **Code Quality**: Follows established Java/Maven patterns\n- **Integration**: Builds on existing ship placement and turn-based firing features\n\nCloses #3",
    "state": "merged",
    "created_at": "2025-10-16T11:16:24.652Z",
    "updated_at": "2025-10-16T11:43:54.422Z",
    "merged_by": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "merge_user": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "merged_at": "2025-10-16T11:43:54.814Z",
    "closed_by": null,
    "closed_at": null,
    "target_branch": "master",
    "source_branch": "feature/issue-3-us-03-track-ship-damage-announ",
    "user_notes_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "author": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "assignees": [],
    "assignee": null,
    "reviewers": [],
    "source_project_id": 202,
    "target_project_id": 202,
    "labels": [],
    "draft": false,
    "imported": false,
    "imported_from": "none",
    "work_in_progress": false,
    "milestone": null,
    "merge_when_pipeline_succeeds": false,
    "merge_status": "can_be_merged",
    "detailed_merge_status": "not_open",
    "merge_after": null,
    "sha": "87eeab27ea5608bd6f6cc5b05e7b57ca08bd1c51",
    "merge_commit_sha": "de11ae559d11ef92dc12e5f5f87e509e8a5c5efa",
    "squash_commit_sha": null,
    "discussion_locked": null,
    "should_remove_source_branch": null,
    "force_remove_source_branch": null,
    "prepared_at": "2025-10-16T11:16:26.645Z",
    "reference": "!3",
    "references": {
      "short": "!3",
      "relative": "!3",
      "full": "simulationsprojects_bachelorarbeit_ivan_esau/ba_project_a02_battleship!3"
    },
    "web_url": "https://gitlab.nibbler.fh-swf.de/simulationsprojects_bachelorarbeit_ivan_esau/ba_project_a02_battleship/-/merge_requests/3",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "squash": false,
    "squash_on_merge": false,
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "has_conflicts": false,
    "blocking_discussions_resolved": true
  },
  {
    "id": 720,
    "iid": 4,
    "project_id": 202,
    "title": "[US-04] Single-player mode vs. computer opponent",
    "description": "## Description\nImplements single-player mode with computer AI opponent for the Battleship game.\n\n## Features\n- **Computer Player AI**: New `ComputerPlayer` class with two difficulty levels\n  - **Easy**: Random valid shots\n  - **Standard**: Hunt/target strategy after hits\n- **Legal Fleet Placement**: Computer automatically places legal fleet (no overlaps, within bounds)\n- **Single-Player Game Mode**: New constructor in `Game` class for single-player games\n- **AI Learning**: Standard difficulty learns from hits and targets adjacent cells\n- **No Duplicate Shots**: Computer never shoots at the same coordinate twice\n\n## Technical Implementation\n- **ComputerPlayer.java**: Complete AI implementation with ship placement and targeting logic\n- **Game.java**: Extended with single-player mode support and computer turn execution\n- **Comprehensive Tests**: Full test coverage for all AI behaviors and acceptance criteria\n\n## Acceptance Criteria Verified\n✅ **Given Single-Player is chosen, when the match starts, then the computer's fleet exists and is legal but hidden.**\n- Computer places all 5 ships legally (no overlaps, within bounds)\n- Fleet remains hidden from human player\n\n✅ **Given the computer took a turn, when the history is inspected, then its shot is at a previously untargeted coordinate.**\n- Computer maintains list of available shots\n- Never shoots at same coordinate twice\n- Valid coordinates within board bounds\n\n✅ **Given Standard difficulty and a computer hit, when subsequent computer turns occur, then at least one subsequent shot targets an adjacent cell until the ship is sunk.**\n- Standard difficulty implements hunt/target strategy\n- After hit, targets adjacent cells systematically\n- Clears hit sequence after ship is sunk\n\n## Files Modified/Created\n- `src/main/java/org/example/model/ComputerPlayer.java` - New computer AI implementation\n- `src/main/java/org/example/controller/Game.java` - Extended for single-player mode\n- `src/test/java/org/example/model/ComputerPlayerTest.java` - Comprehensive AI tests\n- `src/test/java/org/example/controller/GameTest.java` - Single-player mode integration tests\n\n## Testing\n- All acceptance criteria covered by unit tests\n- Integration tests for single-player game flow\n- Edge case testing for AI behaviors\n- 100% test coverage for new functionality\n\nCloses #4",
    "state": "opened",
    "created_at": "2025-10-16T12:09:10.354Z",
    "updated_at": "2025-10-16T12:41:40.437Z",
    "merged_by": null,
    "merge_user": null,
    "merged_at": null,
    "closed_by": null,
    "closed_at": null,
    "target_branch": "master",
    "source_branch": "feature/issue-4-us-04-single-player-mode-vs-co",
    "user_notes_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "author": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "assignees": [],
    "assignee": null,
    "reviewers": [],
    "source_project_id": 202,
    "target_project_id": 202,
    "labels": [],
    "draft": false,
    "imported": false,
    "imported_from": "none",
    "work_in_progress": false,
    "milestone": null,
    "merge_when_pipeline_succeeds": false,
    "merge_status": "unchecked",
    "detailed_merge_status": "unchecked",
    "merge_after": null,
    "sha": "ec6512eb0d3bd64d6f391e856990f3277dceae93",
    "merge_commit_sha": null,
    "squash_commit_sha": null,
    "discussion_locked": null,
    "should_remove_source_branch": null,
    "force_remove_source_branch": null,
    "prepared_at": "2025-10-16T12:09:12.362Z",
    "reference": "!4",
    "references": {
      "short": "!4",
      "relative": "!4",
      "full": "simulationsprojects_bachelorarbeit_ivan_esau/ba_project_a02_battleship!4"
    },
    "web_url": "https://gitlab.nibbler.fh-swf.de/simulationsprojects_bachelorarbeit_ivan_esau/ba_project_a02_battleship/-/merge_requests/4",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "squash": false,
    "squash_on_merge": false,
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "has_conflicts": false,
    "blocking_discussions_resolved": true
  }
]