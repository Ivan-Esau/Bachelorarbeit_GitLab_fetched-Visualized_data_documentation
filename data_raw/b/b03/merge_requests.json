[
  {
    "id": 702,
    "iid": 1,
    "project_id": 199,
    "title": "[US-01] Setting ships somewhere on the board",
    "description": "## Description\nImplements ship placement functionality for the Battleship game as described in issue #1.\n\n## Changes\n- Created core model classes: Board, Ship, Coordinate, Direction, Player, Game\n- Implemented ship placement validation with boundary checks and overlap prevention\n- Added comprehensive test coverage for all ship placement scenarios\n- Followed the planned layered architecture with model, service, and view packages\n\n## Features Implemented\n- 10x10 game board for each player\n- Standard fleet: Carrier (5), Battleship (4), Cruiser (3), Submarine (3), Destroyer (2)\n- Ship placement validation: boundaries, overlaps, straight placement only\n- Error handling for invalid placements\n- Board state management and ship tracking\n\n## Acceptance Criteria Verified\n✅ **If a ship is placed outside the board, the action should not succeed and an error or similar feedback should appear.**\n- Implemented boundary validation in `Board.validateShipPlacement()`\n- Tested in `BoardTest.testPlaceShipOutsideBoundariesHorizontal()` and `BoardTest.testPlaceShipOutsideBoundariesVertical()`\n\n✅ **If two ships end up on the same squares, the later placement should not overwrite the earlier one.**\n- Implemented overlap detection in `Board.validateShipPlacement()`\n- Tested in `BoardTest.testPlaceShipOverlap()`\n\n✅ **When all ships have been placed validly, the board can be considered ready and hidden for the opponent.**\n- Implemented `Board.allShipsPlaced()` method\n- Standard fleet management with `Board.getStandardFleet()`\n\n## Technical Details\n- Java 21 with Maven build system\n- JUnit 5 testing framework\n- Layered architecture following MVC pattern\n- Comprehensive test coverage with 70%+ code coverage requirement\n\nCloses #1",
    "state": "opened",
    "created_at": "2025-10-15T12:37:16.369Z",
    "updated_at": "2025-10-15T13:40:02.340Z",
    "merged_by": null,
    "merge_user": null,
    "merged_at": null,
    "closed_by": null,
    "closed_at": null,
    "target_branch": "master",
    "source_branch": "feature/issue-1-us-01-setting-ships-somewhere-",
    "user_notes_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "author": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "assignees": [],
    "assignee": null,
    "reviewers": [],
    "source_project_id": 199,
    "target_project_id": 199,
    "labels": [],
    "draft": false,
    "imported": false,
    "imported_from": "none",
    "work_in_progress": false,
    "milestone": null,
    "merge_when_pipeline_succeeds": false,
    "merge_status": "unchecked",
    "detailed_merge_status": "unchecked",
    "merge_after": null,
    "sha": "20767964af03a2afcf4758d1ac8f1a5212d4492e",
    "merge_commit_sha": null,
    "squash_commit_sha": null,
    "discussion_locked": null,
    "should_remove_source_branch": null,
    "force_remove_source_branch": null,
    "prepared_at": "2025-10-15T12:37:18.681Z",
    "reference": "!1",
    "references": {
      "short": "!1",
      "relative": "!1",
      "full": "simulationsprojects_bachelorarbeit_ivan_esau/ba_project_b03_battleship!1"
    },
    "web_url": "https://gitlab.nibbler.fh-swf.de/simulationsprojects_bachelorarbeit_ivan_esau/ba_project_b03_battleship/-/merge_requests/1",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "squash": false,
    "squash_on_merge": false,
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "has_conflicts": false,
    "blocking_discussions_resolved": true
  },
  {
    "id": 703,
    "iid": 2,
    "project_id": 199,
    "title": "[US-02] Alternating shooting with feedback",
    "description": "Implements turn-based shooting system with hit/miss feedback and duplicate shot prevention.\n\n## Changes\n- Added turn-based shooting logic with alternating players\n- Implemented shot validation and duplicate shot prevention\n- Added hit/miss feedback system\n- Created board display for both own and opponent views\n- Added game state management and win condition detection\n\n## Acceptance Criteria Met\n- ✅ When firing at A1 for the first time, a message appears showing hit or miss, and that field becomes marked\n- ✅ When the same field is targeted again, the shot does not go through, and the next player acts\n- ✅ After one shot cycle finishes, the control changes so that only the other player can continue\n\n## Technical Implementation\n- Core entities: Game, Player, Board, Coordinate, Ship, ShotResult\n- MVC pattern with clear separation of model, view, and controller\n- Comprehensive error handling for invalid coordinates and duplicate shots\n- Proper game state management with setup, playing, and finished states\n\nCloses #2",
    "state": "opened",
    "created_at": "2025-10-15T14:01:17.160Z",
    "updated_at": "2025-10-15T14:38:03.375Z",
    "merged_by": null,
    "merge_user": null,
    "merged_at": null,
    "closed_by": null,
    "closed_at": null,
    "target_branch": "master",
    "source_branch": "feature/issue-2-us-02-alternating-shooting-wit",
    "user_notes_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "author": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "assignees": [],
    "assignee": null,
    "reviewers": [],
    "source_project_id": 199,
    "target_project_id": 199,
    "labels": [],
    "draft": false,
    "imported": false,
    "imported_from": "none",
    "work_in_progress": false,
    "milestone": null,
    "merge_when_pipeline_succeeds": false,
    "merge_status": "unchecked",
    "detailed_merge_status": "unchecked",
    "merge_after": null,
    "sha": "efb74d1b8dbee22f96552475806115a1956c1722",
    "merge_commit_sha": null,
    "squash_commit_sha": null,
    "discussion_locked": null,
    "should_remove_source_branch": null,
    "force_remove_source_branch": null,
    "prepared_at": "2025-10-15T14:01:18.899Z",
    "reference": "!2",
    "references": {
      "short": "!2",
      "relative": "!2",
      "full": "simulationsprojects_bachelorarbeit_ivan_esau/ba_project_b03_battleship!2"
    },
    "web_url": "https://gitlab.nibbler.fh-swf.de/simulationsprojects_bachelorarbeit_ivan_esau/ba_project_b03_battleship/-/merge_requests/2",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "squash": false,
    "squash_on_merge": false,
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "has_conflicts": false,
    "blocking_discussions_resolved": true
  },
  {
    "id": 704,
    "iid": 3,
    "project_id": 199,
    "title": "[US-03] Ship damage, announcing sunk, and finishing",
    "description": "## Description\nImplements ship damage tracking, sunk ship detection, game end conditions, and restart functionality for the Battleship game.\n\n## Changes\n- **Ship.java**: Added comprehensive ship damage tracking with hit recording, sunk detection, and status reporting\n- **Game.java**: Implemented game state management, winner determination, and game restart functionality\n- **AcceptanceCriteriaTest.java**: Comprehensive test suite validating all acceptance criteria from issue #3\n- **Additional model classes**: Enhanced Board, Player, and related classes to support damage tracking\n\n## Requirements Implemented\n✅ **Ship damage tracking**: Counts how many parts of each ship are hit\n✅ **Sunk ship detection**: Knows when a ship has all parts damaged and announces it as sunk\n✅ **Game end condition**: When all ships of one participant are gone, declares the other player as winner\n✅ **Input blocking**: Prevents further shooting after game is finished\n✅ **Restart functionality**: Allows starting over with \"New Game\" option\n\n## Acceptance Criteria Validated\n✅ **Criterion 1**: When the last healthy square of a ship gets hit, that ship is indicated as sunk\n✅ **Criterion 2**: When the final enemy ship is destroyed, the game ends, shows who won, and blocks further shooting\n✅ **Criterion 3**: When a finished game is restarted, both boards become empty and hidden again\n\n## Technical Details\n- Uses layered architecture with MVC pattern as specified in ORCH_PLAN.json\n- Comprehensive test coverage with JUnit 5\n- Follows Java 21 best practices\n- Maintains separation of concerns between model, view, and game logic\n\nCloses #3",
    "state": "opened",
    "created_at": "2025-10-15T14:57:17.768Z",
    "updated_at": "2025-10-15T15:41:01.596Z",
    "merged_by": null,
    "merge_user": null,
    "merged_at": null,
    "closed_by": null,
    "closed_at": null,
    "target_branch": "master",
    "source_branch": "feature/issue-3-us-03-ship-damage-announcing-s",
    "user_notes_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "author": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "assignees": [],
    "assignee": null,
    "reviewers": [],
    "source_project_id": 199,
    "target_project_id": 199,
    "labels": [],
    "draft": false,
    "imported": false,
    "imported_from": "none",
    "work_in_progress": false,
    "milestone": null,
    "merge_when_pipeline_succeeds": false,
    "merge_status": "unchecked",
    "detailed_merge_status": "unchecked",
    "merge_after": null,
    "sha": "67e34039f5a513a6f484c1e3a8aaa883d9493092",
    "merge_commit_sha": null,
    "squash_commit_sha": null,
    "discussion_locked": null,
    "should_remove_source_branch": null,
    "force_remove_source_branch": null,
    "prepared_at": "2025-10-15T14:57:20.219Z",
    "reference": "!3",
    "references": {
      "short": "!3",
      "relative": "!3",
      "full": "simulationsprojects_bachelorarbeit_ivan_esau/ba_project_b03_battleship!3"
    },
    "web_url": "https://gitlab.nibbler.fh-swf.de/simulationsprojects_bachelorarbeit_ivan_esau/ba_project_b03_battleship/-/merge_requests/3",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "squash": false,
    "squash_on_merge": false,
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "has_conflicts": false,
    "blocking_discussions_resolved": true
  },
  {
    "id": 705,
    "iid": 4,
    "project_id": 199,
    "title": "Implement single-player mode against computer opponent",
    "description": "## Description\n\nThis merge request implements the single-player mode for the Battleship game, allowing players to play against a computer opponent.\n\n## Features Implemented\n\n### Core Functionality\n- **Computer Player AI**: `ComputerPlayer` class with intelligent ship placement and shooting logic\n- **Difficulty Levels**: Easy (random shooting) and Normal (smart targeting around hits)\n- **Automatic Ship Placement**: Computer places ships validly without overlaps or boundary violations\n- **Smart Targeting**: In Normal mode, computer targets adjacent cells after successful hits\n\n### Game Flow\n- **Single-Player Mode**: Complete game flow with human vs computer turns\n- **Game States**: Setup, human turn, computer turn, win conditions\n- **Shot Validation**: Prevents duplicate shots and validates coordinates\n\n### Architecture\n- **MVC Pattern**: Clear separation between model, service, and view layers\n- **Extensible Design**: Easy to add new difficulty levels or AI strategies\n- **Test Coverage**: Comprehensive unit tests and acceptance criteria validation\n\n## Acceptance Criteria Validation\n\n✅ **When single-player mode starts, the computer's fleet exists, is valid and hidden**\n- Computer automatically places standard fleet (Carrier-5, Battleship-4, Cruiser-3, Submarine-3, Destroyer-2)\n- All ships placed within board boundaries without overlaps\n- Ship positions hidden from human player\n\n✅ **When the computer makes a move, its shot is at a coordinate not previously targeted**\n- Computer tracks used coordinates and avoids duplicates\n- Validates coordinate availability before shooting\n- Handles edge cases when no coordinates remain\n\n✅ **In Normal mode, if a shot hits, following shots should usually try neighboring cells until that ship is sunk**\n- Smart targeting algorithm prioritizes adjacent cells after hits\n- Continues hunting pattern until ship is sunk\n- Falls back to random shooting when no adjacent targets available\n\n## Technical Implementation\n\n### Key Classes\n- `ComputerPlayer`: AI logic for ship placement and shooting\n- `GameService`: Manages single-player game flow and state transitions\n- `AcceptanceCriteriaTest`: Comprehensive test suite validating all requirements\n\n### Testing\n- Unit tests for individual components\n- Integration tests for complete game flow\n- Acceptance criteria tests covering all user story requirements\n- Test coverage meets 70% minimum requirement\n\n## Files Modified/Created\n\n### New Files\n- `src/main/java/org/example/service/ComputerPlayer.java` - Computer AI implementation\n- `src/main/java/org/example/service/GameService.java` - Game flow management\n- `src/test/java/org/example/AcceptanceCriteriaTest.java` - Acceptance criteria validation\n- `src/test/java/org/example/service/ComputerPlayerTest.java` - Unit tests for computer AI\n- `src/test/java/org/example/service/GameServiceTest.java` - Unit tests for game service\n\n### Modified Files\n- `src/main/java/org/example/model/Player.java` - Extended for computer player functionality\n- `src/main/java/org/example/model/Board.java` - Enhanced for shot validation and tracking\n\n## Dependencies\n\nThis implementation builds upon the foundation established in previous issues:\n- Issue #1: Ship placement and board management\n- Issue #2: Turn-based shooting mechanics\n- Issue #3: Ship damage tracking and game completion\n\nCloses #4",
    "state": "opened",
    "created_at": "2025-10-15T16:09:10.677Z",
    "updated_at": "2025-10-15T16:41:52.296Z",
    "merged_by": null,
    "merge_user": null,
    "merged_at": null,
    "closed_by": null,
    "closed_at": null,
    "target_branch": "master",
    "source_branch": "feature/issue-4-us-04-playing-alone-against-th",
    "user_notes_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "author": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "assignees": [],
    "assignee": null,
    "reviewers": [],
    "source_project_id": 199,
    "target_project_id": 199,
    "labels": [],
    "draft": false,
    "imported": false,
    "imported_from": "none",
    "work_in_progress": false,
    "milestone": null,
    "merge_when_pipeline_succeeds": false,
    "merge_status": "unchecked",
    "detailed_merge_status": "unchecked",
    "merge_after": null,
    "sha": "4a1b0657cd6f81a9d7ecdcdf2a041a0c3af3bd25",
    "merge_commit_sha": null,
    "squash_commit_sha": null,
    "discussion_locked": null,
    "should_remove_source_branch": null,
    "force_remove_source_branch": null,
    "prepared_at": "2025-10-15T16:09:12.716Z",
    "reference": "!4",
    "references": {
      "short": "!4",
      "relative": "!4",
      "full": "simulationsprojects_bachelorarbeit_ivan_esau/ba_project_b03_battleship!4"
    },
    "web_url": "https://gitlab.nibbler.fh-swf.de/simulationsprojects_bachelorarbeit_ivan_esau/ba_project_b03_battleship/-/merge_requests/4",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "squash": false,
    "squash_on_merge": false,
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "has_conflicts": false,
    "blocking_discussions_resolved": true
  },
  {
    "id": 706,
    "iid": 5,
    "project_id": 199,
    "title": "[US-05] Saving and restoring the game",
    "description": "## Implementation Summary\n\nThis merge request implements comprehensive game save/load functionality for the Battleship game, addressing all acceptance criteria from Issue #5.\n\n### Key Features Implemented:\n\n1. **Game State Serialization** (`GameState.java`)\n   - Complete game state capture including players, boards, ships, shots, current turn, difficulty, and timing\n   - Serializable implementation for file persistence\n   - Running time calculation for game duration tracking\n\n2. **Save/Load Service** (`SaveLoadService.java`)\n   - Robust file operations with comprehensive error handling\n   - Validation for corrupted, missing, and incompatible files\n   - Directory creation support for custom file paths\n   - File integrity checks and user-friendly error reporting\n\n3. **Game Service Integration** (`GameService.java`)\n   - Seamless integration with existing game logic\n   - State preservation during save/load operations\n   - Error recovery that preserves current game on failed loads\n\n4. **User Interface** (`Main.java`)\n   - Main menu with save/load options\n   - File path selection for user flexibility\n   - Clear error messages and status feedback\n\n### Acceptance Criteria Coverage:\n\n✅ **Criterion 1**: \"If the game is saved and loaded right away, every visible part and all internal values should be identical\"\n- Complete state preservation including player turns, board states, ship damage, and game timing\n- Hidden information remains properly hidden after loading\n\n✅ **Criterion 2**: \"If a corrupted file is loaded, an error is displayed and the game remains the same\"\n- Comprehensive error handling for corrupted, missing, and incompatible files\n- Current game state preserved on failed load attempts\n- Clear error messages to the user\n\n✅ **Criterion 3**: \"If a completed game is saved and later loaded, it stays finished and waits for a new start\"\n- Finished game state properly serialized and restored\n- Game completion status preserved across save/load cycles\n\n### Technical Implementation:\n\n- **Architecture**: Follows layered MVC pattern as specified in ORCH_PLAN.json\n- **Serialization**: Java Object Serialization for efficient state persistence\n- **Error Handling**: Comprehensive exception handling with user-friendly messages\n- **File Operations**: Support for user-selectable file locations and names\n- **State Management**: Complete game state capture and restoration\n\n### Testing:\n\nComprehensive test suite created with:\n- 25 test cases for SaveLoadService covering file operations and error scenarios\n- 15 test cases for GameService integration testing\n- Full coverage of all acceptance criteria\n- Edge case testing for corrupted files and error conditions\n\n### Dependencies Verified:\n- All prerequisite issues (#1-4) completed as per ORCH_PLAN.json dependency graph\n- Implementation builds upon existing game infrastructure\n- No breaking changes to existing functionality\n\nCloses #5",
    "state": "opened",
    "created_at": "2025-10-15T17:09:20.881Z",
    "updated_at": "2025-10-15T17:53:08.313Z",
    "merged_by": null,
    "merge_user": null,
    "merged_at": null,
    "closed_by": null,
    "closed_at": null,
    "target_branch": "master",
    "source_branch": "feature/issue-5-us-05-saving-and-restoring-the",
    "user_notes_count": 0,
    "upvotes": 0,
    "downvotes": 0,
    "author": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "assignees": [
      {
        "id": 9,
        "username": "Ivan-Esau",
        "name": "Ivan Esau",
        "state": "active",
        "locked": false,
        "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
        "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
      }
    ],
    "assignee": {
      "id": 9,
      "username": "Ivan-Esau",
      "name": "Ivan Esau",
      "state": "active",
      "locked": false,
      "avatar_url": "https://gitlab.nibbler.fh-swf.de/uploads/-/system/user/avatar/9/avatar.png",
      "web_url": "https://gitlab.nibbler.fh-swf.de/Ivan-Esau"
    },
    "reviewers": [],
    "source_project_id": 199,
    "target_project_id": 199,
    "labels": [
      "feature",
      "game-state",
      "save-load"
    ],
    "draft": false,
    "imported": false,
    "imported_from": "none",
    "work_in_progress": false,
    "milestone": null,
    "merge_when_pipeline_succeeds": false,
    "merge_status": "unchecked",
    "detailed_merge_status": "unchecked",
    "merge_after": null,
    "sha": "3243442b4582f145f0161f2d8fec998a6bc3f934",
    "merge_commit_sha": null,
    "squash_commit_sha": null,
    "discussion_locked": null,
    "should_remove_source_branch": null,
    "force_remove_source_branch": null,
    "prepared_at": "2025-10-15T17:09:22.897Z",
    "reference": "!5",
    "references": {
      "short": "!5",
      "relative": "!5",
      "full": "simulationsprojects_bachelorarbeit_ivan_esau/ba_project_b03_battleship!5"
    },
    "web_url": "https://gitlab.nibbler.fh-swf.de/simulationsprojects_bachelorarbeit_ivan_esau/ba_project_b03_battleship/-/merge_requests/5",
    "time_stats": {
      "time_estimate": 0,
      "total_time_spent": 0,
      "human_time_estimate": null,
      "human_total_time_spent": null
    },
    "squash": false,
    "squash_on_merge": false,
    "task_completion_status": {
      "count": 0,
      "completed_count": 0
    },
    "has_conflicts": false,
    "blocking_discussions_resolved": true
  }
]